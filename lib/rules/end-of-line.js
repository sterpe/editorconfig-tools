// Generated by CoffeeScript 1.11.1
var EndOfLine, LineRule, eolRegex,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

LineRule = require('../line-rule');

eolRegex = require('../util').eolRegex;

EndOfLine = (function(superClass) {
  extend(EndOfLine, superClass);

  function EndOfLine() {
    this.fixLine = bind(this.fixLine, this);
    return EndOfLine.__super__.constructor.apply(this, arguments);
  }

  EndOfLine.prototype.propertyName = 'end_of_line';

  EndOfLine.prototype.fixLine = function(line) {
    return line.replace(eolRegex, (function(_this) {
      return function(match) {
        switch (_this.setting) {
          case 'crlf':
            return '\r\n';
          case 'cr':
            return '\r';
          case 'lf':
            return '\n';
          default:
            throw new Error("unsupported value for end_of_line: " + _this.setting);
        }
      };
    })(this));
  };


  /**
   * Infer the line ending, returning `undefined` if there is no line ending
   * @param {String} line
   */

  EndOfLine.prototype.inferLine = function(line) {
    var ref;
    switch ((ref = line.match(eolRegex)) != null ? ref[0] : void 0) {
      case '\r\n':
        return 'crlf';
      case '\n':
        return 'lf';
      case '\r':
        return 'cr';
    }
  };

  return EndOfLine;

})(LineRule);

module.exports = EndOfLine;
